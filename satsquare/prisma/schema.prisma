generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id             Int              @id @default(autoincrement())
  pseudo         String           @unique
  email          String           @unique
  role_id        Int?
  mot_de_passe   String
  association_id Int?
  statut_compte  Boolean
  sponsor_id     Int?
  cree_le        DateTime         @default(now())
  mis_a_jour_le  DateTime         @updatedAt
  Evenement      Evenement[]
  EvenementsQuiz EvenementsQuiz[]
  Quiz           Quiz[]
  association    Association?     @relation(fields: [association_id], references: [id])
  role           Role?            @relation(fields: [role_id], references: [id])
  sponsor        Sponsor?         @relation(fields: [sponsor_id], references: [id])
}

model Association {
  id                Int              @id @default(autoincrement())
  nom               String
  adresse_eclairage String
  valide            Int
  est_confirme      Boolean
  logo_url          String
  cree_le           DateTime         @default(now())
  mis_a_jour_le     DateTime         @updatedAt
  AssociationDons   AssociationDon[]
  Utilisateurs      Utilisateur[]
}

model Sponsor {
  id                Int           @id @default(autoincrement())
  nom               String
  valide            Int
  adresse_eclairage String
  est_confirme      Boolean
  cree_le           DateTime      @default(now())
  mis_a_jour_le     DateTime      @updatedAt
  Dons              Don[]
  Utilisateurs      Utilisateur[]
}

model Role {
  id           Int           @id @default(autoincrement())
  nom          String
  utilisateurs Utilisateur[]
}

model Evenement {
  id                 Int              @id @default(autoincrement())
  nom                String
  description        String
  user_id            Int?
  commence_a         DateTime
  termine_a          DateTime
  est_public         Boolean
  est_gratuit        Boolean
  sat_minimum        Int
  recompense_joueurs Int
  don_association    Int
  don_plateforme     Int
  cree_le            DateTime         @default(now())
  mis_a_jour_le      DateTime         @updatedAt
  Dons               Don[]
  utilisateur        Utilisateur?     @relation(fields: [user_id], references: [id])
  EvenementsQuiz     EvenementsQuiz[]
}

model Don {
  id              Int              @id @default(autoincrement())
  sponsor_id      Int
  evenement_id    Int
  montant         Float
  cree_le         DateTime         @default(now())
  mis_a_jour_le   DateTime         @updatedAt
  AssociationDons AssociationDon[]
  evenement       Evenement        @relation(fields: [evenement_id], references: [id])
  sponsor         Sponsor          @relation(fields: [sponsor_id], references: [id])
}

model AssociationDon {
  id             Int         @id @default(autoincrement())
  don_id         Int
  association_id Int
  association    Association @relation(fields: [association_id], references: [id])
  don            Don         @relation(fields: [don_id], references: [id])
}

model Quiz {
  id             Int              @id @default(autoincrement())
  titre          String
  user_id        Int?
  categorie      String
  cree_le        DateTime         @default(now())
  mis_a_jour_le  DateTime         @updatedAt
  EvenementsQuiz EvenementsQuiz[]
  Questions      Question[]
  utilisateur    Utilisateur?     @relation(fields: [user_id], references: [id])
}

model EvenementsQuiz {
  id           Int         @id @default(autoincrement())
  score        Int
  evenement_id Int
  quiz_id      Int
  question_id  Int
  reponse_id   Int
  user_id      Int
  evenement    Evenement   @relation(fields: [evenement_id], references: [id])
  quiz         Quiz        @relation(fields: [quiz_id], references: [id])
  utilisateur  Utilisateur @relation(fields: [user_id], references: [id])

  @@unique([evenement_id, quiz_id, question_id, reponse_id, user_id], name: "unique_event_quiz_question_response_user")
}

model Question {
  id             Int       @id @default(autoincrement())
  quiz_id        Int?
  texte_question String
  quiz           Quiz?     @relation(fields: [quiz_id], references: [id], onDelete: Cascade)
  Reponses       Reponse[]
}

model Reponse {
  id            Int       @id @default(autoincrement())
  question_id   Int?
  texte_reponse String
  est_correcte  Boolean
  question      Question? @relation(fields: [question_id], references: [id], onDelete: Cascade)
}
