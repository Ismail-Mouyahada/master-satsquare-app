generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Quiz {
  id              Int             @id @default(autoincrement())
  room            String? // room can be null
  manager         String? // manager can be null
  players         Player[]        @relation("QuizPlayers")
  started         Boolean         @default(false)
  subject         String
  password        String
  questions       Question[]      @relation("QuizQuestions")
  playersAnswers  PlayersAnswer[] @relation("QuizPlayersAnswers")
  roundStartTime  Int             @default(0)
  currentQuestion Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  utilisateur   Utilisateur? @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)
  utilisateurId Int?

  evenementsQuiz EvenementsQuiz[] // Relation to EvenementsQuiz
}

model Player {
  id      Int             @id @default(autoincrement())
  name    String
  quiz    Quiz?           @relation("QuizPlayers", fields: [quizId], references: [id], onDelete: Cascade)
  quizId  Int?
  answers PlayersAnswer[] @relation("PlayerAnswers")
}

model Question {
  id             Int             @id @default(autoincrement())
  quiz           Quiz            @relation("QuizQuestions", fields: [quizId], references: [id], onDelete: Cascade)
  quizId         Int
  time           Int
  image          String? // image can be null
  answers        Json // Store as JSON
  cooldown       Int
  question       String
  solution       Int // index of the correct answer
  playersAnswers PlayersAnswer[] @relation("QuestionAnswers")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model PlayersAnswer {
  id         Int      @id @default(autoincrement())
  player     Player   @relation("PlayerAnswers", fields: [playerId], references: [id], onDelete: Cascade)
  playerId   Int
  quiz       Quiz     @relation("QuizPlayersAnswers", fields: [quizId], references: [id], onDelete: Cascade)
  quizId     Int
  question   Question @relation("QuestionAnswers", fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  answer     Int // index of the selected answer
  answeredAt DateTime @default(now())
}

model Utilisateur {
  id            Int      @id @default(autoincrement())
  pseudo        String?  @unique
  email         String   @unique
  roleId        Int?
  mot_de_passe  String
  associationId Int?
  statutCompte  Boolean? @default(false)
  sponsorId     Int?
  creeLe        DateTime @default(now())
  misAJourLe    DateTime @updatedAt
  walletId      String? // Optional field for the LNbits wallet ID
  balance       BigInt?

  quizzes        Quiz[]
  evenements     Evenement[]
  evenementsQuiz EvenementsQuiz[]

  association Association? @relation(fields: [associationId], references: [id], onDelete: Cascade)
  role        Role?        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  sponsor     Sponsor?     @relation(fields: [sponsorId], references: [id], onDelete: Cascade)
}

model Association {
  id               Int      @id @default(autoincrement())
  nom              String
  adresseEclairage String
  valide           Int
  estConfirme      Boolean
  logoUrl          String
  creeLe           DateTime @default(now())
  misAJourLe       DateTime @updatedAt

  associationDons AssociationDon[]
  utilisateurs    Utilisateur[]
}

model Sponsor {
  id               Int      @id @default(autoincrement())
  nom              String
  valide           Int
  adresseEclairage String
  estConfirme      Boolean
  creeLe           DateTime @default(now())
  misAJourLe       DateTime @updatedAt

  dons         Don[]
  utilisateurs Utilisateur[]
}

model Role {
  id           Int           @id @default(autoincrement())
  nom          String
  utilisateurs Utilisateur[]
}

model Evenement {
  id                Int      @id @default(autoincrement())
  nom               String
  description       String
  userId            Int?
  commenceA         DateTime
  termineA          DateTime
  estPublic         Boolean
  estGratuit        Boolean
  satMinimum        Int
  recompenseJoueurs Int
  donAssociation    Int
  donPlateforme     Int
  creeLe            DateTime @default(now())
  misAJourLe        DateTime @updatedAt

  dons           Don[]
  utilisateur    Utilisateur?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  evenementsQuiz EvenementsQuiz[]
}

model Don {
  id          Int      @id @default(autoincrement())
  sponsorId   Int
  evenementId Int
  montant     Float
  creeLe      DateTime @default(now())
  misAJourLe  DateTime @updatedAt

  associationDons AssociationDon[]
  evenement       Evenement        @relation(fields: [evenementId], references: [id], onDelete: Cascade)
  sponsor         Sponsor          @relation(fields: [sponsorId], references: [id], onDelete: Cascade)
}

model AssociationDon {
  id            Int         @id @default(autoincrement())
  donId         Int
  associationId Int
  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)
  don           Don         @relation(fields: [donId], references: [id], onDelete: Cascade)
}

model EvenementsQuiz {
  id          Int @id @default(autoincrement())
  score       Int
  evenementId Int
  quizId      Int
  questionId  Int
  reponseId   Int
  userId      Int

  evenement   Evenement   @relation(fields: [evenementId], references: [id], onDelete: Cascade)
  quiz        Quiz        @relation(fields: [quizId], references: [id], onDelete: Cascade)
  utilisateur Utilisateur @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([evenementId, quizId, questionId, reponseId, userId], name: "unique_event_quiz_question_response_user")
}

model TopScore {
  id               Int       @id @default(autoincrement())
  username         String?
  room             String?
  points           Int       @default(0)
  sujet            String?
  idQuiz           Int?
  satsWinner       Float?    @default(0)
  dateCreation     DateTime  @default(now())
  dateModification DateTime? @updatedAt
}
