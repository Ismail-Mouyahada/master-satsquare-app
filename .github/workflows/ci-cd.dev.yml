name: CI/CD Dev Pipeline

on:
  # D√©clenche le workflow sur les pushes vers la branche "develop"
  push:
    branches:
      - develop
  # D√©clenche le workflow sur les pull requests vers la branche "develop"
  pull_request:
    branches:
      - develop

env:
  # Variables d'environnement pour l'environnement de d√©veloppement
  ENVIRONMENT: dev
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
  NEXT_PUBLIC_SOCKET_URL: ${{ secrets.NEXT_PUBLIC_SOCKET_URL }}
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

jobs:
  # Job de construction de l'application
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # V√©rifie le code source de la branche cible

      - name: Run end-to-end tests
        run: |
          # D√©finit les variables d'environnement n√©cessaires pour les tests end-to-end
          export DATABASE_URL=postgresql://dev:tT8s758l79WDINR8tKHtfKBr1oiWXpWY@dpg-cr7ervi3esus7388bamg-a.frankfurt-postgres.render.com/dev_db_satsquare
          export NEXTAUTH_SECRET="CP912ECDSClsdezoPDZCMSJXCPISJCIY20SmfdsFOYDflHZORdsvdsFOZIRGOIZHGOURHZ"
          export NEXT_PUBLIC_LNURL_AUTH_PUBLIC_KEY="02c3b844b8104f0c1b15c507774c9ba7fc609f58f343b9b149122e944dd20c9362"
          export NEXT_PUBLIC_SITE_URL="http://localhost:3000"
          export NEXT_PUBLIC_SOCKET_URL="ws://localhost:5157"
          export REDIS_URL="redis://localhost:6379"
          cd ./satsquare

          # Installation des d√©pendances et pr√©paration de l'application
          npm install
          npx prisma generate
          npx prisma db push
          npm run seed
          npm run build

  # Job de linting du code source
  lint:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd ./satsquare
          npm ci # Installation des d√©pendances

      - name: Run Linting
        run: |
          cd ./satsquare
          npm run lint # Ex√©cute le linting

  # Job pour les tests unitaires
  unit-tests:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd ./satsquare
          npm ci
          npm i jest-environment-jsdom jest # Installe Jest pour les tests unitaires

      - name: Run Jest Unit Tests
        run: |
          cd ./satsquare
          npm run test # Ex√©cute les tests unitaires

  # Job pour les tests end-to-end
  e2e-tests:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run end-to-end tests
        run: |
          # D√©finit les variables d'environnement n√©cessaires pour les tests end-to-end
          export DATABASE_URL=postgresql://dev:tT8s758l79WDINR8tKHtfKBr1oiWXpWY@dpg-cr7ervi3esus7388bamg-a.frankfurt-postgres.render.com/dev_db_satsquare
          export NEXTAUTH_SECRET="CP912ECDSClsdezoPDZCMSJCIY20SmfdsFOYDflHZORdsvdsFOZIRGOIZHGOURHZ"
          export NEXT_PUBLIC_LNURL_AUTH_PUBLIC_KEY="02c3b844b8104f0c1b15c507774c9ba7fc609f58f343b9b149122e944dd20c9362"
          export NEXT_PUBLIC_SITE_URL="http://localhost:3000"
          export NEXT_PUBLIC_SOCKET_URL="ws://localhost:5157"
          export REDIS_URL="redis://localhost:6379"
          cd ./satsquare

          # Installation des d√©pendances et pr√©paration de l'application pour les tests end-to-end
          npm install
          npx prisma generate
          npx prisma db push
          npm run seed
          npm run build
          # npm run test:e2e # D√©sactiv√© pour l'instant

  # Job pour la v√©rification des vuln√©rabilit√©s des d√©pendances
  deps-vulnerability:
    needs: [e2e-tests, build, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create lock file
        run: |
          cd ./satsquare
          npm install --package-lock-only # G√©n√®re uniquement le fichier package-lock

      - name: Install dependencies
        run: |
          cd ./satsquare
          npm ci
          npm update # Met √† jour les d√©pendances

      - name: Install jest-environment-jsdom
        run: |
          cd ./satsquare
          npm install jest-environment-jsdom --save-dev # Installe une d√©pendance sp√©cifique pour les tests

      - name: Audit npm dependencies
        run: |
          cd ./satsquare
          npm audit --audit-level=moderate # Audite les d√©pendances npm pour les vuln√©rabilit√©s

  # Job pour la couverture de code avec Codecov
  codecov:
    needs: [e2e-tests, build, unit-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd ./satsquare
          npm ci
          npm i jest-environment-jsdom jest # Installe les d√©pendances n√©cessaires pour les tests

      - name: Run tests and generate coverage report
        run: |
          cd ./satsquare
          npm run test -- --coverage # Ex√©cute les tests avec rapport de couverture

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Utilise le token secret pour l'authentification

  # Job pour l'analyse de performance avec Lighthouse
  lighthouse:
    needs: [codecov, deps-vulnerability]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd ./satsquare
          npm install # Installe les d√©pendances n√©cessaires

      - name: Run Lighthouse CI
        run: |
          cd ./satsquare
          npx lhci autorun # Ex√©cute Lighthouse CI pour l'analyse de performance

  # Job pour construire l'image Docker et la pousser vers le registre
  docker-build:
    needs: lighthouse
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Se connecte au registre de conteneurs GitHub
          
      - name: Build Docker image
        run: |
          # D√©finit les variables d'environnement pour le build Docker
          export DATABASE_URL=postgresql://dev:tT8s758l79WDINR8tKHtfKBr1oiWXpWY@dpg-cr7ervi3esus7388bamg-a.frankfurt-postgres.render.com/dev_db_satsquare
          export NEXTAUTH_SECRET="CP912ECDSClsdezoPDZCMSJCIY20SmfdsFOYDflHZORdsvdsFOZIRGOIZHGOURHZ"
          export NEXT_PUBLIC_LNURL_AUTH_PUBLIC_KEY="02c3b844b8104f0c1b15c507774c9ba7fc609f58f343b9b149122e944dd20c9362"
          export NEXT_PUBLIC_SITE_URL="http://localhost:3000"
          export NEXT_PUBLIC_SOCKET_URL="ws://localhost:5157"
          export REDIS_URL="redis://localhost:6379"
          cd ./satsquare
          docker build -t ghcr.io/ismail-mouyahada/master-satsquare-app:dev -f Dockerfile.dev . # Construit l'image Docker
  
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ghcr.io/ismail-mouyahada/master-satsquare-app:dev # Scanne l'image Docker pour les vuln√©rabilit√©s
  
      - name: Push Docker image to GitHub Container Registry
        run: docker push ghcr.io/ismail-mouyahada/master-satsquare-app:dev # Pousse l'image Docker vers le registre

  # Job pour notifier l'√©tat de la pipeline sur Discord
  notify:
    needs: [docker-build,lighthouse]
    runs-on: ubuntu-latest
    steps:
    
      - name: Notify Discord
        if: success() # Notifie en cas de succ√®s
        uses: discord-actions/message@v2
        with:
          webhookUrl: "https://discord.com/api/webhooks/1278096229351293008/UdVm3whQn9wb_neR4tuS5TGFfFzaiAo4Jijwa0yuEks1GwoVdrV-lcsdvw5qlA0Kq9CN"
          message: "Bah Oui √ßa marche mon gars üó∫"

      - name: Notify Discord
        if: failure() # Notifie en cas d'√©chec
        uses: discord-actions/message@v2
        with:
          webhookUrl: "https://discord.com/api/webhooks/1278096229351293008/UdVm3whQn9wb_neR4tuS5TGFfFzaiAo4Jijwa0yuEks1GwoVdrV-lcsdvw5qlA0Kq9CN"
          message: "Ops tu as gliss√© mon pote ‚ò£"

      - name: Notify Discord
        if: ${{ always() && contains(needs.*.result, 'failure') }} # Notifie si une partie du pipeline a √©chou√©
        uses: discord-actions/message@v2
        with:
          webhookUrl: "https://discord.com/api/webhooks/1278096229351293008/UdVm3whQn9wb_neR4tuS5TGFfFzaiAo4Jijwa0yuEks1GwoVdrV-lcsdvw5qlA0Kq9CN"
          message: "C'√©tait presque bon mon kiki ! üòá"
