name: CI/CD Production Pipeline

on:
  # D√©clenche le workflow sur les pushes vers la branche "main"
  push:
    branches:
      - main
  # D√©clenche le workflow sur les pull requests vers la branche "main"
  pull_request:
    branches:
      - main

env:
  # Variables d'environnement pour l'environnement de production
  ENVIRONMENT: production
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
  NEXT_PUBLIC_SOCKET_URL: ${{ secrets.NEXT_PUBLIC_SOCKET_URL }}
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true # Annule toute ex√©cution pr√©c√©dente du m√™me workflow si un nouveau est d√©clench√©

jobs:
  # Job de construction de l'application
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # V√©rifie le code source de la branche cible

      - name: Run end-to-end tests
        run: |
          # D√©finit les variables d'environnement n√©cessaires pour les tests end-to-end
          export DATABASE_URL=${{ secrets.DATABASE_URL }}
          export NEXTAUTH_SECRET=${{ github.sha }}${{ github.sha }}${{ github.sha }}
          export NEXT_PUBLIC_LNURL_AUTH_PUBLIC_KEY=${{ github.sha }}${{ github.sha }}
          export NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}
          export NEXT_PUBLIC_SOCKET_URL=${{ secrets.NEXT_PUBLIC_SOCKET_URL }}
          export REDIS_URL= ${{ secrets.REDIS_URL }}
          cd ./satsquare

          # Installation des d√©pendances et pr√©paration de l'application
          npm install
          npx prisma generate
          npx prisma db push
          npm run seed
          npm run build

  # Job de linting du code source
  lint:
    needs: [build]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd ./satsquare
          npm ci # Installation des d√©pendances

      - name: Run Linting
        run: |
          cd ./satsquare
          npm run lint # Ex√©cute le linting

  # Job pour les tests unitaires
  unit-tests:
    needs: [build]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd ./satsquare
          npm ci
          npm i jest-environment-jsdom jest # Installe Jest pour les tests unitaires

      - name: Run Jest Unit Tests
        run: |
          cd ./satsquare
          npm run test # Ex√©cute les tests unitaires

  # Job pour les tests end-to-end
  e2e-tests:
    needs: [build]
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run end-to-end tests
        run: |
          # D√©finit les variables d'environnement n√©cessaires pour les tests end-to-end
          export DATABASE_URL=${{ secrets.DATABASE_URL }}
          export NEXTAUTH_SECRET=${{ github.sha }}
          export NEXT_PUBLIC_LNURL_AUTH_PUBLIC_KEY=${{ github.sha }}${{ github.sha }}
          export NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}
          export NEXT_PUBLIC_SOCKET_URL=${{ secrets.NEXT_PUBLIC_SOCKET_URL }}
          export REDIS_URL= ${{ secrets.REDIS_URL }}
          cd ./satsquare

          # Installation des d√©pendances et pr√©paration de l'application pour les tests end-to-end
          npm install
          npx prisma generate
          npx prisma db push
          npm run seed
          npm run build
          # npm run test:e2e # D√©sactiv√© pour l'instant

  # Job pour la v√©rification des vuln√©rabilit√©s des d√©pendances
  deps-vulnerability:
    needs: [e2e-tests, build, unit-tests]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create lock file
        run: |
          cd ./satsquare
          npm install --package-lock-only # G√©n√®re uniquement le fichier package-lock

      - name: Install dependencies
        run: |
          cd ./satsquare
          npm ci
          npm update # Met √† jour les d√©pendances

      - name: Install jest-environment-jsdom
        run: |
          cd ./satsquare
          npm install jest-environment-jsdom --save-dev # Installe une d√©pendance sp√©cifique pour les tests

      - name: Audit npm dependencies
        run: |
          cd ./satsquare
          npm audit --audit-level=moderate # Audite les d√©pendances npm pour les vuln√©rabilit√©s

  # Job pour la couverture de code avec Codecov
  codecov:
    needs: [e2e-tests, build, unit-tests]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd ./satsquare
          npm ci
          npm i jest-environment-jsdom jest # Installe les d√©pendances n√©cessaires pour les tests

      - name: Run tests and generate coverage report
        run: |
          cd ./satsquare
          npm run test -- --coverage # Ex√©cute les tests avec rapport de couverture

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Utilise le token secret pour l'authentification

  # Job pour l'analyse de performance avec Lighthouse
  lighthouse:
    needs: [codecov, deps-vulnerability]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          cd ./satsquare
          npm install # Installe les d√©pendances n√©cessaires

      - name: Run Lighthouse CI
        run: |
          cd ./satsquare
          npx lhci autorun # Ex√©cute Lighthouse CI pour l'analyse de performance

# Job pour construire l'image Docker et la pousser vers le registre
  docker-build:
    needs: [lighthouse]
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # Se connecte au registre de conteneurs GitHub
          
      - name: Build Docker image
        run: |
          cd ./satsquare 
          docker build -f Dockerfile.prod --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} --build-arg NEXTAUTH_SECRET="${{ github.sha }}" -t ghcr.io/ismail-mouyahada/master-satsquare-app:prod-${{ github.sha }} .
  
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ghcr.io/ismail-mouyahada/master-satsquare-app:prod-${{ github.sha }} # Scanne l'image Docker pour les vuln√©rabilit√©s
  
      - name: Push Docker image to GitHub Container Registry
        run: docker push ghcr.io/ismail-mouyahada/master-satsquare-app:prod-${{ github.sha }} # Pousse l'image Docker vers le registre

  notify:
    needs: [docker-build]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Notification de succ√®s üéâ
        uses: containrrr/shoutrrr-action@v1
        if: success() # Notifie en cas de succ√®s
        with:
          url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          title: "üöÄ D√©ploiement r√©ussi : ${{ github.sha }} sur PRODUCTION üéâ"
          message: "Voir les modifications : ${{ github.event.compare }}."
          username: "PreproductionBOT"
          avatar: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9SYdK1M7jEIJgdj9foHiEoUdUiYxfREv3jg&s"
  
      - name: Notification d'√©chec üí•
        uses: containrrr/shoutrrr-action@v1
        if: failure() # Notifie en cas d'√©chec
        with:
          url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          message: "‚ùó Consultez les logs pour plus de d√©tails. Voir les modifications : ${{ github.event.compare }}."
          username: "PreproductionBOT"
          avatar: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9SYdK1M7jEIJgdj9foHiEoUdUiYxfREv3jg&s"

 

  
